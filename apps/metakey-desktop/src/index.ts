import { app, BrowserWindow, screen, ipcMain } from 'electron';
import { spawn } from 'child_process';
import path from 'path';
import { ClipboardService } from 'clipboard-engine';
import { SpellService } from 'spell-engine';
import { ConfigService } from 'config-engine';
import { ThemeService } from 'theme-engine';
import { IpcChannel, Theme } from 'shared-types';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

process.env.ELECTRON_ENABLE_LOGGING = 'true';

let mainWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = async () => {
  // --- Service Initialization ---
  const configService = new ConfigService();
  const clipboardService = new ClipboardService();
  await configService.initialize({
    spells: path.join(app.getAppPath(), 'stock-assets/spells'),
    themes: path.join(app.getAppPath(), 'stock-assets/themes'),
  });

  const themeService = new ThemeService({
    themesDirectory: configService.getThemesDirectory(),
  });

  const spellService = new SpellService({
    spellsDirectory: configService.getSpellsDirectory(),
  });

  console.log('✅ User data is stored at:', configService.getUserDataPath());

  // --- Window Creation ---
  const primaryDisplay = screen.getPrimaryDisplay();
  const { x, y, width, height } = primaryDisplay.workArea;

  const windowWidth = 800;
  const windowHeight = 800;

  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: windowWidth,
    height: windowHeight,
    // Position window in the top-right corner of the primary display's work area.
    x: x + width - windowWidth - 20, // 20px margin from the right edge
    y: y + 20, // 20px margin from the top edge
    frame: false,
    transparent: true,
    alwaysOnTop: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Load and apply the default theme on startup
  const defaultTheme = await themeService.loadTheme('default');
  mainWindow.webContents.on('did-finish-load', () => {
    mainWindow.webContents.send(IpcChannel.SET_THEME, defaultTheme);
  });

  // --- System Agent Initialization ---
  const agentPath = path.join(app.getAppPath(), 'resources/bin/system-agent');
  const agent = spawn(agentPath, []);

  agent.stderr.on('data', (data: Buffer) => {
    console.error(`[system-agent] ${data.toString()}`);
  });

  agent.stdout.on('data', (data: Buffer) => {
    const lines = data.toString().split('\n');
    for (const line of lines) {
      if (!line) {
        continue;
      }
      try {
        const event = JSON.parse(line);
        if (event.event === 'hotkey_pressed') {
          mainWindow.webContents.send(IpcChannel.SET_STATE, { status: 'running' });

          const clipboardContent = clipboardService.read();

          // Let's test the newly installed spell
          spellService
            .run('spell-reverse-text', { input: clipboardContent })
            .then((result) => {
              console.log(`✅ Spell Result: ${result.output}`);
              clipboardService.write(result.output);
              mainWindow.webContents.send(IpcChannel.SET_STATE, {
                status: 'success',
                message: result.output,
              });
            })
            .catch((err) => {
              mainWindow.webContents.send(IpcChannel.SET_STATE, {
                status: 'error',
                message: err.message,
              });
            });
        } else if (event.key) {
          mainWindow.webContents.send(IpcChannel.KEY_EVENT, event);
        }
      } catch (e) {
        /* ignore */
      }
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
